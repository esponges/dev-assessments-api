// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model QuestionMetadata {
  id            String    @id @default(uuid())
  question_type String
  topic         String // main technology such   as React, GraphQL, etc
  // we'd probably need subtopics like librarier, frameworks, etc
  difficulty    String
  question      Question?
}

model Question {
  id         String           @id @default(uuid())
  content    String
  createdAt  DateTime         @default(now())
  metadataId String           @unique
  metadata   QuestionMetadata @relation(fields: [metadataId], references: [id])
  updatedAt  DateTime         @updatedAt
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String
  role      String   @default("candidate") // todo: next roles? admin, recruiter, etc
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastSeen  DateTime? // probably not needed for now
  // token?
}

model CandidateResume {
  id                String   @id @default(uuid())
  userId            String   @default("anonymous")
  resume            String
  techStack         String[]
  detailedTechStack Json     @default("[{}]")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  // add a relation to the candidate in the future
}

// type Assessment = {
//   title: string;
//   questions: {
//     question_text: string;
//     question_type: string;
//     question_topic: string;
//     choices?: string[];
//     correct_answer: string;
//   }[];
// };

model AssessmentQuestion {
  id            String     @id @default(uuid())
  text          String     @default("")
  type          String     @default("")
  // figure out how to correctly store the topic
  // questionTopic String
  // should choices be a json array with ids? probably a relation to a separate model
  choices       String[]
  correctAnswer String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  assessmentId  String
  assessment    Assessment @relation(fields: [assessmentId], references: [id])
  difficulty    String     @default("")
  stack         String     @default("")
  // todo: add relation to a candidate
}

// this model should help us to calculate the assessment score for the candidadtes general scoreboards
model QuestionDifficulty {
  id         String   @id @default(uuid())
  difficulty String
  value      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Assessment {
  id        String               @id @default(uuid())
  title     String
  questions AssessmentQuestion[]
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}
